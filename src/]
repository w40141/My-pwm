import hashlib
import hmac
import random
import string
import os

import fire

ROOT_PATH = os.environ["HOME"] + "/password"
CONFIG_FILE = ROOT_PATH + "/password_config.txt"


def PwManager():
    def __init__(self,):
        if not os.path.exists(ROOT_PATH):
            os.makedirs(ROOT_PATH)
        self.password_path = self._make_password_path()
        self.password_file = self.password_path + "/password.csv"

    def _make_password_path(self):
        if os.path.isfile(CONFIG_FILE):
            password_path = self._load_config()
        else:
            password_path = self.register()
        return password_path

    def _load_config_file(self):
        with open(CONFIG_FILE, "r") as f:
            password_path = f.read().strip()
        return password_path

    def register(self):
        print("Input Password file's path. Default[" + ROOT_PATH + "]")
        path = input()
        with open(CONFIG_FILE, "w") as f:
            f.write(path)
        return path

    def _gen(self, domain: str, user_id: str, size: int = 12, symbol_flag: bool = False) -> str:
        signature = hmac.new(domain.encode(), user_id.encode(), hashlib.sha256).hexdigest()
        random.seed(signature)
        if symbol_flag:
            start = 33
            end = 127
            chars = "".join([chr(i) for i in range(start, end)])
        else:
            chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
        return "".join(random.choices(chars, k=size))

    def generate(self):
        domain = input("Input salt: ").strip()
        user_id = input("Input user ID: ").strip()
        size = int(input("Input the length of a password: ").strip())
        symbol_flag = input("Is symbols valid? (Default is false.): ").strip()
        password = self._gen(domain, user_id, size, symbol_flag=symbol_flag)
        print(password)

    # def _load_password_path(self):
    #     with

    # def _search(self, name: str) -> str:
    #     password_list = self._load_password_path()
    #     if name in password_list:
    #         return password_list[name]
    #     else:
    #         return ""

    # def show(self):
    #     name = input('Input name: ')
    #     return name

    # def delete(self):
    #     pass

    # def change(self):
    #     pass


def main() -> None:
    fire.Fire(PwManager)
